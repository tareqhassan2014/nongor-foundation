// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String      @id @default(uuid())
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  email                    String      @unique
  emailVerified            Boolean?    @default(false)
  firstName                String?     @default("Anonymous") @db.VarChar(255)
  lastName                 String?     @default("Anonymous") @db.VarChar(255)
  password                 String
  avatar                   String?     @default("default-avatar.png") @db.VarChar(255)
  role                     Role        @default(USER)
  bloodGroup               bloodGroup?
  lastDonation             DateTime?
  passwordResetToken       String?     @db.VarChar(255)
  passwordResetExpires     DateTime?
  emailVerificationToken   String?     @db.VarChar(255)
  emailVerificationExpires DateTime?
  photos                   photos[]
  degree                   degree[]
  address                  address[]
  contact                  contact[]
}

model photos {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  public_id String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model degree {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  degree      String
  institute   String
  passingYear DateTime
  GPA         Float
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@index([userId, degree], map: "Degree_userId_degree_key")
}

model address {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  country   String      @default("Bangladesh") @db.VarChar(255)
  division  String?     @db.VarChar(255)
  district  String?     @db.VarChar(255)
  upazila   String?     @db.VarChar(255)
  tana      String?     @db.VarChar(255)
  union     String?     @db.VarChar(255)
  village   String?     @db.VarChar(255)
  state     String?     @db.VarChar(255)
  city      String?     @db.VarChar(255)
  street    String?     @db.VarChar(255)
  zip       String?     @db.VarChar(255)
  type      AddressType @default(PRESENT)
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?
}

model contact {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String?  @db.VarChar(255)
  whatsapp  String?  @db.VarChar(255)
  email     String?  @db.VarChar(255)
  imo       String?  @db.VarChar(255)
  viber     String?  @db.VarChar(255)
  facebook  String?  @db.VarChar(255)
  twitter   String?  @db.VarChar(255)
  linkedin  String?  @db.VarChar(255)
  skype     String?  @db.VarChar(255)
  website   String?  @db.VarChar(255)
  page      String?  @db.VarChar(255)
  github    String?  @db.VarChar(255)
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum AddressType {
  PRESENT
  PERMANENT
}

enum Role {
  USER
  MEMBER
  ADVISOR
  EDITOR
  EXECUTIVE
  ADMIN
}

enum bloodGroup {
  A_Positive  @map("A+")
  B_Positive  @map("B+")
  O_Positive  @map("O+")
  AB_Positive @map("AB+")
  A_Negative  @map("A-")
  B_Negative  @map("B-")
  O_Negative  @map("O-")
  AB_Negative @map("AB-")
}
